{"version":3,"sources":["services/check-service.js","components/manifest-card-body/index.js","components/manifest-card-body/manifest-card-body.js","components/manifest-info-panel/index.js","components/manifest-info-panel/manifest-info-panel.js","components/worker-card-body/index.js","components/worker-card-body/worker-card-body.js","components/worker-info-panel/index.js","components/worker-info-panel/worker-info-panel.js","components/index-page-card-body/index.js","components/index-page-card-body/index-page-card-body.js","components/index-page-info-panel/index.js","components/index-page-info-panel/index-page-info-panel.js","index.js"],"names":["CheckService","_oldWorker","_newWorker","_manifest","url","fetch","res","ok","headers","get","concat","this","json","text","status","_checkType","ManifestCardBody","_ref","senderIdStatus","typeStatus","type","senderId","react_default","a","createElement","color","includes","className","ManifestInfoPanel","checkService","state","contentType","success","warning","danger","key","shortid","generate","onErrorContentType","err","_this","setState","onErrorSendrId","getContentType","props","getManifestContentType","then","catch","getGcmSenderId","body","Object","values","setPanelType","classNames","prevProps","prevState","count","_this$state","lib","animationIn","animationOut","isVisible","animateOnMount","style","maxWidth","components_manifest_card_body","React","Component","WorkerCardBody","WorkerInfoPanel","worker","components_worker_card_body","IndexPageCardBody","manifestStatus","workersStatus","manifest","workers","IndexPageInfoPanel","pushWorkers","isManifestPresent","getIndexPageBody","f","length","components_index_page_card_body","SearchInput","getUrl","urlValue","value","trim","match","replace","onClick","_this2","placeholder","ref","el","App","updateUrl","newUrl","_this3","src_SearchInput","components_manifest_info_panel","components_worker_info_panel","components_index_page_info_panel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.36fc5564.chunk.js","sourcesContent":["export default class CheckService {\n   \n    _oldWorker = \"/sp-push-worker.js\";\n    _newWorker = \"/sp-push-worker-fb.js\";\n    _manifest  = \"/sp-push-manifest.json\";\n\n    async _checkType(url){\n        const res = await fetch(url); //{mode: 'no-cors'});\n        if(res.ok){\n            return await res.headers.get('Content-Type');\n        }\n        return 'not found';\n    }\n\n    async getGcmSenderId(url){\n        const res = await fetch(`${url}${this._manifest}`);\n        if(res.ok){\n            return await res.json();\n        }\n        return 'not found';\n    }\n\n    async getIndexPageBody(url){\n        const res = await fetch(`${url}`);\n        if(res.ok){\n            return await res.text();\n        }\n        return res.status;\n    }\n\n    getManifestContentType(url){\n        return this._checkType(`${url}${this._manifest}`);\n    }\n\n    getNewWorkerContentType(url){\n        return this._checkType(`${url}${this._newWorker}`);\n   }\n\n   getOldWorkerContentType(url){\n        return this._checkType(`${url}${this._oldWorker}`);\n    }\n}","import ManifestCardBody from './manifest-card-body'\n\nexport default ManifestCardBody;\n","import React from 'react';\n\nconst ManifestCardBody = ({ type, senderId }) => {\n\n    let senderIdStatus, typeStatus;\n\n    if (senderId == null){\n        senderIdStatus = <font color='red'>not found</font>;\n    } else if (senderId){\n        senderIdStatus = <font color='lime'>correct</font>;\n    } else{\n        senderIdStatus = <font color='red'>incorrect</font>;\n    }\n\n    if (type && type.includes('application/json')){\n        typeStatus = <font color='lime'>{type}</font>;\n    } else{\n        typeStatus = <font color='red'>{type}</font>;\n    }\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected content type:</b>  application/json</p>\n                    <p className=\"card-text\"><b>Current content type:</b> {typeStatus}</p>\n                    <p className=\"card-text\"><b>gcm_sender_id:</b> {senderIdStatus} </p>\n        </div>\n    );\n}\n\nexport default ManifestCardBody;","import ManifestInfoPanel from './manifest-info-panel';\n\nexport default ManifestInfoPanel;","import React from 'react';\n\nimport CheckService from '../../services/check-service'\n\nimport ManifestCardBody from '../manifest-card-body'\nimport { Animated } from \"react-animated-css\";\nimport shortid from 'shortid';\n\nclass ManifestInfoPanel extends React.Component{\n\n    checkService = new CheckService();\n\n    state = {\n        contentType: null,\n        senderId: null,\n        success: false,\n        warning: false,\n        danger: false,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.getContentType();\n            this.getGcmSenderId();\n        };\n    }\n\n    onErrorContentType = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            contentType: 'not found',\n            key: shortid.generate(),\n        });\n    }\n\n    onErrorSendrId = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            senderId: null,\n        });\n    }\n\n    getContentType = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getManifestContentType(this.props.url)\n            .then((type) => {\n                if (type.includes('application/json')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    });\n                }else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch(this.onErrorContentType);\n    }\n\n    getGcmSenderId = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getGcmSenderId(this.props.url)\n            .then((body) => {\n                if (Object.values(body).includes('300013155679')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        senderId: true,\n                    });\n                } else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        senderId: false,\n                    })\n                }\n            })\n            .catch(this.onErrorSendrId);\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { contentType, senderId } = this.state;\n        const classNames = this.setPanelType(this.state);\n        return(\n \n                <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n                        animateOnMount={true} key={this.state.key}>\n                    <div className={classNames} \n                        style={maxWidthStyle}>\n                        <div className=\"card-header\"><h4>sp-push-manifest.json</h4></div>\n                            <ManifestCardBody type={contentType} senderId={senderId}/>\n                    </div>\n                </Animated>\n        )\n    }\n}\n\nexport default ManifestInfoPanel;","import WorkerCardBody from './worker-card-body';\n\nexport default WorkerCardBody;","import React from 'react';\n\nconst WorkerCardBody = ({ type }) => {\n\n    let typeStatus;\n\n    if (type && type.includes('application/json')){\n        typeStatus = <font color='lime'>{type}</font>;\n    } else{\n        typeStatus = <font color='red'>{type}</font>;\n    }\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected content type:</b>  application/json</p>\n                    <p className=\"card-text\"><b>Current content type:</b> {typeStatus}</p>\n        </div>\n    );\n}\n\nexport default WorkerCardBody;","import WorkerInfoPanel from './worker-info-panel'\n\nexport default WorkerInfoPanel","import React from 'react';\n\nimport CheckService from '../../services/check-service';\n\nimport WorkerCardBody from '../worker-card-body';\nimport shortid from 'shortid';\nimport { Animated } from \"react-animated-css\";\n\nclass WorkerInfoPanel extends React.Component{\n\n    checkService = new CheckService();\n\n    state = {\n        contentType: null,\n        success: false,\n        danger: false,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.getContentType();\n        };\n    }\n\n    getContentType = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getManifestContentType(this.props.url)\n            .then((type) => {\n                if (type.includes('application/json')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    });\n                }else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch(this.onErrorContentType);\n    }\n\n    onErrorContentType = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            contentType: 'not found',\n            key: shortid.generate(),\n        });\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { contentType } = this.state;\n        const classNames = this.setPanelType(this.state);\n\n        const { worker } = this.props;\n\n        return(\n            <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n            animateOnMount={true} key={this.state.key}>\n                <div className={classNames} \n                    style={maxWidthStyle}>\n                    <div className=\"card-header\"><h4>{worker}</h4></div>\n                        <div className=\"card-body\">\n                            <WorkerCardBody type={contentType}/>\n                        </div>\n                </div>\n            </Animated>\n        )\n    }\n}\n\nexport default WorkerInfoPanel;","import IndexPageCardBody from './index-page-card-body';\n\nexport default IndexPageCardBody;","import React from 'react';\n\nconst IndexPageCardBody = ({ manifest, workers }) => {\n    \n    let manifestStatus, workersStatus;\n    if (manifest == null){\n        manifestStatus = <font color='red'>index page not found</font>;\n    }else if (!manifest){\n        manifestStatus = <font color='lime'>manifest not found</font>;\n    } else {\n        manifestStatus = <font color='red'>manifest was found!</font>;\n    }\n\n    if (!workers){\n        workersStatus = <font>other workers not found</font>;\n    } else{\n        workersStatus = <font color='red'>{workers}</font>;\n    }\n\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected result:</b>  not found</p>\n                    <p className=\"card-text\"><b>Checking for manifest:</b> {manifestStatus}</p>\n                    <p className=\"card-text\"><b>Checking for other push workers:</b> {workersStatus}</p>\n        </div>\n    );\n}\n\nexport default IndexPageCardBody;","import IndexPageInfoPanel from './index-page-info-panel'\n\nexport default IndexPageInfoPanel;","import React from 'react';\n\nimport CheckService from '../../services/check-service'\n\nimport IndexPageCardBody from '../index-page-card-body';\n\nimport { Animated } from \"react-animated-css\";\nimport shortid from 'shortid';\n\nclass IndexPageInfoPanel extends React.Component{\n    checkService = new CheckService();\n\n    state = {\n        manifest: null,\n        success: false,\n        warning: false,\n        danger: false,\n        pushWorkers: null,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.isManifestPresent();\n        };\n    }\n\n    isManifestPresent = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getIndexPageBody(this.props.url)\n            .then((res) => {\n                let workers = '';\n                let f = false;\n                if (res.includes('OneSignalSDK.js')){\n                    workers += 'onesignal ';\n                } else if (res.includes('push4site')){\n                    workers += 'push4site ';\n                } else if (res.includes('pushcrew')){\n                    workers += 'pushcrew ';\n                } else if (res.includes('gravitec')){\n                    workers += 'gravitec ';\n                } else if (res.includes('esputnik')){\n                    workers += 'esputnik ';\n                } else if (res.includes('pushwoosh')){\n                    workers += 'pushwoosh ';\n                };\n                if (res.includes('manifest')){\n                    f = true;\n                }\n                if (f || workers.length() > 0){\n                    this.setState({\n                        success: false,\n                        manifest: f,\n                        warning: true,\n                        danger: false,\n                        pushWorkers: workers,\n                        key: shortid.generate(),\n                    })\n                }else {\n                    this.setState({\n                        success: true,\n                        warning: false,\n                        danger: false,\n                        manifest: false,\n                        pushWorkers: null,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch((err) => {\n                this.setState({\n                    warning: false,\n                    danger: true,\n                    success: false,\n                    manifest: null,\n                    pushWorkers: null,\n                    key: shortid.generate(),\n                });\n            })\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.warning){\n                classNames += ' border-warning'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { manifest, pushWorkers } = this.state;\n        const classNames = this.setPanelType(this.state);\n\n        return(\n            <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n            animateOnMount={true} key={this.state.key}>\n                <div className={classNames} \n                    style={maxWidthStyle}>\n                    <div className=\"card-header\"><h4>Index page</h4></div>\n                        <IndexPageCardBody manifest={manifest} workers={pushWorkers} />\n                </div>\n            </Animated>\n        )\n    }\n}\n\nexport default IndexPageInfoPanel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport ManifestInfoPanel from './components/manifest-info-panel';\nimport WorkerInfoPanel from './components/worker-info-panel';\nimport IndexPageInfoPanel from './components/index-page-info-panel';\n\nimport './index.css';\n\nclass SearchInput extends React.Component{\n\n    getUrl = () => {\n        let url = this.urlValue.value.trim();\n        if (url && !url.match(/^http([s]?):\\/\\/.*/)){\n            url = 'https://' + url.replace(/\\/$/, '');\n        }\n        this.props.onClick(url);\n    }\n\n    render() {\n        return (\n            <div className=\"form-inline input-width\">\n                <input \n                    //className=\"form-control my-2\"\n                    className=\"form-control mr-sm-2\"\n                    type = \"text\"\n                    placeholder = \"https://example.com\"\n                    ref={ el => this.urlValue = el }\n                    />\n                <button\n                    onClick={this.getUrl}\n                    className=\"btn btn-secondary my-2 my-sm-0\"\n                    >Проверить</button>\n            </div>\n        );\n    };\n}\n\nclass App extends React.Component{\n\n    state = {\n        url: 'https://sirvitalas.github.io',\n        count: 0,\n    }\n\n    updateUrl = (newUrl) => {\n        this.setState({\n            url: newUrl,  \n            count: this.state.count + 1,    \n        });\n    }\n\n    render(){ \n        return (\n            <div >\n                <h1 className=\"center-me\">Проверка настроек push сервиса</h1>\n                <SearchInput onClick={this.updateUrl}/>\n                <p/>\n                <div className=\"one-line\">\n                        <ManifestInfoPanel url={this.state.url} count={this.state.count}/>\n                        <WorkerInfoPanel worker='sp-push-worker-fb.js' url={this.state.url} count={this.state.count}/>\n                        <IndexPageInfoPanel url={this.state.url} count={this.state.count}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}