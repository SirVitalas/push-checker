{"version":3,"sources":["services/check-service.js","components/manifest-card-body/index.js","components/manifest-card-body/manifest-card-body.js","components/manifest-info-panel/index.js","components/manifest-info-panel/manifest-info-panel.js","components/worker-card-body/index.js","components/worker-card-body/worker-card-body.js","components/worker-info-panel/index.js","components/worker-info-panel/worker-info-panel.js","components/index-page-card-body/index.js","components/index-page-card-body/index-page-card-body.js","components/index-page-info-panel/index.js","components/index-page-info-panel/index-page-info-panel.js","index.js"],"names":["CheckService","_oldWorker","_newWorker","_manifest","url","fetch","res","ok","headers","get","concat","this","json","text","status","_checkType","ManifestCardBody","_ref","senderIdStatus","typeStatus","type","senderId","react_default","a","createElement","color","console","log","includes","className","ManifestInfoPanel","checkService","state","contentType","success","warning","danger","key","shortid","generate","testGet","_this","getIndexPageBody","props","then","catch","err","onErrorContentType","setState","onErrorSendrId","getContentType","getManifestContentType","getGcmSenderId","body","Object","values","setPanelType","classNames","prevProps","prevState","count","_this$state","lib","animationIn","animationOut","isVisible","animateOnMount","style","maxWidth","components_manifest_card_body","React","Component","WorkerCardBody","WorkerInfoPanel","worker","components_worker_card_body","IndexPageCardBody","manifestStatus","manifest","IndexPageInfoPanel","isManifestPresent","components_index_page_card_body","SearchInput","getUrl","urlValue","value","match","replace","onClick","_this2","placeholder","ref","el","App","updateUrl","newUrl","_this3","src_SearchInput","components_manifest_info_panel","components_worker_info_panel","components_index_page_info_panel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8ef4cc9a.chunk.js","sourcesContent":["export default class CheckService {\n   \n    _oldWorker = \"/sp-push-worker.js\";\n    _newWorker = \"/sp-push-worker-fb.js\";\n    _manifest  = \"/sp-push-manifest.json\";\n\n    async _checkType(url){\n        //console.log(url + this._manifest);\n        const res = await fetch(url); //{mode: 'no-cors'});\n        if(res.ok){\n            return await res.headers.get('Content-Type');\n        }\n        return 'not found';\n    }\n\n    async getGcmSenderId(url){\n        const res = await fetch(`${url}${this._manifest}`);\n        if(res.ok){\n            return await res.json();\n        }\n        return 'not found';\n    }\n\n    async getIndexPageBody(url){\n        const res = await fetch(`${url}`);\n        if(res.ok){\n            return await res.text();\n        }\n        return res.status;\n    }\n\n    getManifestContentType(url){\n        return this._checkType(`${url}${this._manifest}`);\n    }\n\n    getNewWorkerContentType(url){\n        return this._checkType(`${url}${this._newWorker}`);\n   }\n\n   getOldWorkerContentType(url){\n        return this._checkType(`${url}${this._oldWorker}`);\n    }\n}","import ManifestCardBody from './manifest-card-body'\n\nexport default ManifestCardBody;\n","import React from 'react';\n\nconst ManifestCardBody = ({ type, senderId }) => {\n\n    let senderIdStatus, typeStatus;\n\n    if (senderId == null){\n        senderIdStatus = <font color='red'>not found</font>;\n    } else if (senderId){\n        senderIdStatus = <font color='lime'>correct</font>;\n    } else{\n        senderIdStatus = <font color='red'>incorrect</font>;\n    }\n\n    console.log(type);\n    if (type && type.includes('application/json')){\n        typeStatus = <font color='lime'>{type}</font>;\n    } else{\n        typeStatus = <font color='red'>{type}</font>;\n    }\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected content type:</b>  application/json</p>\n                    <p className=\"card-text\"><b>Current content type:</b> {typeStatus}</p>\n                    <p className=\"card-text\"><b>gcm_sender_id:</b> {senderIdStatus} </p>\n        </div>\n    );\n}\n\nexport default ManifestCardBody;","import ManifestInfoPanel from './manifest-info-panel';\n\nexport default ManifestInfoPanel;","import React from 'react';\n\nimport CheckService from '../../services/check-service'\n\nimport ManifestCardBody from '../manifest-card-body'\nimport { Animated } from \"react-animated-css\";\nimport shortid from 'shortid';\n\nclass ManifestInfoPanel extends React.Component{\n\n    checkService = new CheckService();\n\n    state = {\n        contentType: null,\n        senderId: null,\n        success: false,\n        warning: false,\n        danger: false,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.getContentType();\n            this.getGcmSenderId();\n            this.testGet();\n        };\n    }\n\n    testGet = () => {\n        this.checkService.getIndexPageBody(this.props.url)\n            .then((res) => {\n                console.log(res);\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    onErrorContentType = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            contentType: 'not found',\n            key: shortid.generate(),\n        });\n    }\n\n    onErrorSendrId = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            senderId: null,\n        });\n    }\n\n    getContentType = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getManifestContentType(this.props.url)\n            .then((type) => {\n                if (type.includes('application/json')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    });\n                }else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch(this.onErrorContentType);\n    }\n\n    getGcmSenderId = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getGcmSenderId(this.props.url)\n            .then((body) => {\n                if (Object.values(body).includes('300013155679')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        senderId: true,\n                    });\n                } else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        senderId: false,\n                    })\n                }\n            })\n            .catch(this.onErrorSendrId);\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { contentType, senderId } = this.state;\n        const classNames = this.setPanelType(this.state);\n        return(\n \n                <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n                        animateOnMount={true} key={this.state.key}>\n                    <div className={classNames} \n                        style={maxWidthStyle}>\n                        <div className=\"card-header\"><h4>sp-push-manifest.json</h4></div>\n                            <ManifestCardBody type={contentType} senderId={senderId}/>\n                    </div>\n                </Animated>\n        )\n    }\n}\n\nexport default ManifestInfoPanel;","import WorkerCardBody from './worker-card-body';\n\nexport default WorkerCardBody;","import React from 'react';\n\nconst WorkerCardBody = ({ type }) => {\n\n    let typeStatus;\n\n    if (type && type.includes('application/json')){\n        typeStatus = <font color='lime'>{type}</font>;\n    } else{\n        typeStatus = <font color='red'>{type}</font>;\n    }\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected content type:</b>  application/json</p>\n                    <p className=\"card-text\"><b>Current content type:</b> {typeStatus}</p>\n        </div>\n    );\n}\n\nexport default WorkerCardBody;","import WorkerInfoPanel from './worker-info-panel'\n\nexport default WorkerInfoPanel","import React from 'react';\n\nimport CheckService from '../../services/check-service';\n\nimport WorkerCardBody from '../worker-card-body';\nimport shortid from 'shortid';\nimport { Animated } from \"react-animated-css\";\n\nclass WorkerInfoPanel extends React.Component{\n\n    checkService = new CheckService();\n\n    state = {\n        contentType: null,\n        success: false,\n        danger: false,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.getContentType();\n        };\n    }\n\n    getContentType = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getManifestContentType(this.props.url)\n            .then((type) => {\n                if (type.includes('application/json')){\n                    this.setState({\n                        success: true,\n                        danger: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    });\n                }else{\n                    this.setState({\n                        danger: true,\n                        success: false,\n                        contentType: type,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch(this.onErrorContentType);\n    }\n\n    onErrorContentType = (err) => {\n        this.setState({\n            danger: true,\n            success: false,\n            contentType: 'not found',\n            key: shortid.generate(),\n        });\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { contentType } = this.state;\n        const classNames = this.setPanelType(this.state);\n\n        const { worker } = this.props;\n\n        return(\n            <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n            animateOnMount={true} key={this.state.key}>\n                <div className={classNames} \n                    style={maxWidthStyle}>\n                    <div className=\"card-header\"><h4>{worker}</h4></div>\n                        <div className=\"card-body\">\n                            <WorkerCardBody type={contentType}/>\n                        </div>\n                </div>\n            </Animated>\n        )\n    }\n}\n\nexport default WorkerInfoPanel;","import IndexPageCardBody from './index-page-card-body';\n\nexport default IndexPageCardBody;","import React from 'react';\n\nconst IndexPageCardBody = ({ manifest }) => {\n    \n    let manifestStatus;\n    if (manifest == null){\n        manifestStatus = <font color='red'>index page not found</font>;\n    }else if (!manifest){\n        manifestStatus = <font color='lime'>manifest not found</font>;\n    } else {\n        manifestStatus = <font color='red'>manifest was found!</font>;\n    }\n\n    return(\n        <div className=\"card-body\">\n                    <p className=\"card-text\"><b>Expected result:</b>  not found</p>\n                    <p className=\"card-text\"><b>Checking for manifest:</b> {manifestStatus}</p>\n        </div>\n    );\n}\n\nexport default IndexPageCardBody;","import IndexPageInfoPanel from './index-page-info-panel'\n\nexport default IndexPageInfoPanel;","import React from 'react';\n\nimport CheckService from '../../services/check-service'\n\nimport IndexPageCardBody from '../index-page-card-body';\n\nimport { Animated } from \"react-animated-css\";\nimport shortid from 'shortid';\n\nclass IndexPageInfoPanel extends React.Component{\n    checkService = new CheckService();\n\n    state = {\n        manifest: null,\n        success: false,\n        warning: false,\n        danger: false,\n        key: shortid.generate(),\n    }\n\n    componentDidUpdate(prevProps, prevState){\n        if (prevProps.count !== this.props.count){\n            this.isManifestPresent();\n        };\n    }\n\n    isManifestPresent = () => {\n        if (!this.props.url){ return; };\n        this.checkService.getIndexPageBody(this.props.url)\n            .then((res) => {\n                if (res.includes('manifest')){\n                    this.setState({\n                        success: false,\n                        manifest: true,\n                        warning: true,\n                        danger: false,\n                        key: shortid.generate(),\n                    })\n                }else {\n                    this.setState({\n                        success: true,\n                        warning: false,\n                        danger: false,\n                        manifest: false,\n                        key: shortid.generate(),\n                    })\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({\n                    warning: false,\n                    danger: true,\n                    success: false,\n                    manifest: null,\n                    key: shortid.generate(),\n                });\n            })\n    }\n\n    setPanelType = (state) =>{\n        let classNames = 'card mb-3';\n        if (!state.success && \n            !state.warning &&\n            !state.danger){\n                classNames += ' border-primary'\n            }else if (state.success){\n                classNames += ' border-success'\n            }else if (state.warning){\n                classNames += ' border-warning'\n            }else if (state.danger){\n                classNames += ' border-danger'\n            }\n        return classNames;\n    }\n\n    render(){\n        const maxWidthStyle = {\n            'maxWidth': '20rem',\n        };\n\n        const { manifest } = this.state;\n        const classNames = this.setPanelType(this.state);\n\n        return(\n            <Animated animationIn=\"bounceIn\" animationOut=\"bounceOut\" isVisible={true} \n            animateOnMount={true} key={this.state.key}>\n                <div className={classNames} \n                    style={maxWidthStyle}>\n                    <div className=\"card-header\"><h4>Index page</h4></div>\n                        <IndexPageCardBody manifest={manifest} />\n                </div>\n            </Animated>\n        )\n    }\n}\n\nexport default IndexPageInfoPanel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport ManifestInfoPanel from './components/manifest-info-panel';\nimport WorkerInfoPanel from './components/worker-info-panel';\nimport IndexPageInfoPanel from './components/index-page-info-panel';\n\nimport './index.css';\n\nclass SearchInput extends React.Component{\n\n    getUrl = () => {\n        let url = this.urlValue.value;\n        if (url && !url.match(/^http([s]?):\\/\\/.*/)){\n            url = 'https://' + url.replace(/\\/$/, '');\n        }\n        this.props.onClick(url);\n    }\n\n    render() {\n        return (\n            <div className=\"form-inline input-width\">\n                <input \n                    //className=\"form-control my-2\"\n                    className=\"form-control mr-sm-2\"\n                    type = \"text\"\n                    placeholder = \"https://example.com\"\n                    ref={ el => this.urlValue = el }\n                    />\n                <button\n                    onClick={this.getUrl}\n                    className=\"btn btn-secondary my-2 my-sm-0\"\n                    >Проверить</button>\n            </div>\n        );\n    };\n}\n\nclass App extends React.Component{\n\n    state = {\n        url: 'https://sirvitalas.github.io',\n        count: 0,\n    }\n\n    updateUrl = (newUrl) => {\n        this.setState({\n            url: newUrl,  \n            count: this.state.count + 1,    \n        });\n    }\n\n    render(){ \n        return (\n            <div >\n                <h1 className=\"center-me\">Проверка настроек push сервиса</h1>\n                <SearchInput onClick={this.updateUrl}/>\n                <p/>\n                <div className=\"one-line\">\n                        <ManifestInfoPanel url={this.state.url} count={this.state.count}/>\n                        <WorkerInfoPanel worker='sp-push-worker-fb.js' url={this.state.url} count={this.state.count}/>\n                        <IndexPageInfoPanel url={this.state.url} count={this.state.count}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}